//******************************************
//* HW#3 Problem  a and b                **
//******************************************


/**************************************************************************************
We initialize semaphore varaibles ADone with 2 and BDone with 0. Because of wait 
process B is locked while A can run two times before getting locked. When process is
runned for the second time the key for B is released and B can run once. After that 
ADone is signalled and process A can run one more time at the end of process B.
**************************************************************************************/


semaphore ADone;  
semaphore BDone;

////////////////////////////////////////////
void A() 
{
    wait(ADone); //reduces 
   cout << "A";
   signal(BDone);
   
}

////////////////////////////////////////////
void B() 
{
    wait(BDone);
    wait(BDone); //process is locked 
    cout << "B";
    signal(ADone); 
}

////////////////////////////////////////////
main() 
{
	//initialsem(mutex1, 1);
	initialsem(ADone, 2);
	initialsem(BDone, 0);

    cobegin 
    {
       A();
       A();
       A();
       B();
    }
     cout << endl;
}
