// Answer to 2a: The possible values for sum would be: 3, 4, 5, 6, 7, 8, 9 
// Answer to 2b: The problem is you are stil interleaving through the process causing the
// synchronization to be thrown off since the program displays multiple forms of output.


//******************************************
//* HW#3 Problem 2 a and c                **
//******************************************

int sum;
semaphore mutex1;
semaphore mutex2;

///////////////////////////////////
void One()
// Procedure to add 1 to sum 3 times

{
     int i;
     for ( i = 1; i <= 3; i = i + 1)
     {
     	wait(mutex1);
        sum = sum + 1;
     	signal(mutex2);
     }
}


///////////////////////////////////
void Two()
// Procedure to add 2 to sum 3 times
{
     int i;
     for ( i = 1; i <= 3; i = i + 1)
     {
     	wait(mutex2);
        sum = sum + 2;
     	signal(mutex1);
     }
}


///////////////////////////////////
main()
{
	initialsem(mutex1, 1);
	initialsem(mutex2, 0);
  sum = 0;
  cobegin {  // This will start the two processes concurrently
    One(); 
    Two(); 
  }
  cout << "The sum is " << sum << endl;
}

