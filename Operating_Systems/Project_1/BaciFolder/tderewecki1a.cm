//************************************************
//* HW#3 Problem 1: use for parts a and b and c **
//************************************************


///////////////////////////////////

binarysem mutex1, mutex2, mutex3, mutex4; // globlly defined

atomic void say(int id)
{
  switch (id)
  {  case 1:
     {
	cout << "Stop ";break;
     }
     case 2:
     {
	cout << "Look ";break;
     }
     case 3:
     {
	cout << "Listen ";break;
     }
     case 4:
     {
	cout << "Cross ";break;
     }
  }
}


///////////////////////////////////
void ProcessStop()
{
	wait(mutex1);
	say(1);
	signal(mutex2);
}


///////////////////////////////////
void ProcessLook()
{
	wait(mutex2);
	say(2);
	signal(mutex3);
}



///////////////////////////////////
void ProcessListen()
{
	wait(mutex3);
	say(3);
	signal(mutex4);
}


///////////////////////////////////



///////////////////////////////////
void ProcessCross()
{
	wait(mutex4);
	say(4);
	signal(mutex1);
}


///////////////////////////////////
main()
{
  initialsem(mutex1, 1);
  initialsem(mutex2, 0);
  initialsem(mutex3, 0);
  initialsem(mutex4, 0);

  cobegin {

    	ProcessStop();
	ProcessLook();
	ProcessListen();
    	ProcessCross();

    
  }
    cout << endl;
}

