//******************************************
//* HW#5: Thanksgiving                    **
//******************************************
//                                        **
//       BEN COOK and TARAS DEREWECKI     **
//                                        **
//******************************************

semaphore mutex;
semaphore lastPersonHasSat;
semaphore eat;
semaphore lastPersonEating;
semaphore leave;
semaphore cproceed;
semaphore rproceed;
semaphore mproceed;
semaphore newArrival;
semaphore momHasArrived;
semaphore processEightHasArrived;
semaphore mutex2;
semaphore mutex3;
int peopleSitting;
int peopleEating;
int hayrides;
int done;
int numOfChildren;
int numOfRelatives;
int fatherNeedsToCheckAgain;
int mom;
int eight;
int numOfPeopleSignaled;

////////////////////////////////////////////

void delay() {
   int i;
   int DelayTime;
   DelayTime = random (100);
   for (i = 0; i < DelayTime; i++);
}

////////////////////////////////////////////

void space (int numOfSpaces) {
   int i;
   for (i = 0; i < numOfSpaces; i++) {
          cout << " ";
   }
}

////////////////////////////////////////////

void Mother () {
 
    //Mother Prepares Food
    wait(mutex);
    space(10);
    cout << "Mother is preparing food.\n";
    signal(mutex);

    //delay while mother is preparing food
    delay();

    //Mother puts food in oven
    wait(mutex);
    space(10);
    cout << "Mother is putting food in oven.\n";
    signal(mutex);


//////HAYRIDE CODE GOES HERE//////

    //Wait until younger child has arrived
    signal(momHasArrived);
    wait(processEightHasArrived);

    //Mom waits for hayride
    wait(mutex);
    space(10);
    cout << "Mother waits for hayride.\n";
    mom++;
    signal(mutex);

    signal(newArrival);

    wait(mproceed);

    wait(mutex2);
    cout << " Mother ";
    numOfPeopleSignaled--;
    if (numOfPeopleSignaled == 0) {
        cout << "\n";
     	signal(mutex);
	signal(mutex3);
    }
    signal(mutex2);

//////////////////////////////////

    //Mother Enters House/Washes up/And puts food on table
    wait(mutex);
    space(10);
    cout << "Mother enters house, washes up, and puts food on table.\n";
    signal(mutex);

    //delay while mother is doing these things
    delay();

//////DINNER CODE GOES HERE//////

    //Mother sits down to eat
    wait(mutex);
    space(10);
    cout << "Mother sits down.\n";
    //Originally this output text before signal mutex
    peopleSitting--;
    signal(mutex);

    if (peopleSitting == 0)
    {
          //Last person has sat down
         signal(lastPersonHasSat);
         wait(eat);
    }
    else
    {
          //Still waiting for the last person to sit down
          wait(eat);
    }

    //Mother eats
    wait(mutex);
    space(10);
    cout << "Mother is eating.\n";
    peopleEating--; // new change
    signal(mutex);

    delay();

    if (peopleEating == 0)
    {
          //Last person to finish eating
         signal(lastPersonEating);
         wait(leave);
    }
    else
    {
          //Still waiting for the last person to finish eating
          wait(leave);
    }

//////////////////////////////////

    //Mother reads her favorite book
    wait(mutex);
    space(10);
    cout << "Mother reads her favorite book.\n";
    signal(mutex);

}

////////////////////////////////////////////

void Father () {
int i;
    //Father hooks up horses
    wait(mutex);
    space(15);
    cout << "Father hooks up the horses to the wagon.\n";
    signal(mutex);

    //delay while father hooks up horses
    delay();

//////HAYRIDE CODE GOES HERE//////

    while (hayrides > 0) {
	wait(mutex3);
        //Three children are ready
	if (numOfChildren >= 3) {
		    //Father gives hayride
		    wait(mutex);
		    space(15);
		    cout << "Father gives hayride to ";
		    numOfPeopleSignaled = 3;

		    numOfChildren--;
                    hayrides--;
                    signal(cproceed);

                    numOfChildren--;
                    hayrides--;
		    signal(cproceed);

                    numOfChildren--;
                    hayrides--;
		    signal(cproceed);
	}
	//Two children and one relative
	else if ((numOfRelatives >= 1) && (numOfChildren >= 2)) {
		    //Father gives hayride
		    wait(mutex);
		    space(15);
		    cout << "Father gives hayride to ";
		    numOfPeopleSignaled = 3;

		    numOfRelatives--;
                    hayrides--;
		    signal(rproceed);

                    numOfChildren--;
                    hayrides--;
		    signal(cproceed);

                    numOfChildren--;
                    hayrides--;
		    signal(cproceed);
	}
	//two relatives
	else if (numOfRelatives >= 2) {
		    //Father gives hayride
		    wait(mutex);
		    space(15);
		    cout << "Father gives hayride to ";
		    numOfPeopleSignaled = 2;

		    numOfRelatives--;
                    hayrides--;
		    signal(rproceed);

                    numOfRelatives--;
                    hayrides--;
		    signal(rproceed);
	}
	//The mom and child8 are ready and there is another child for them to go with
	else if ((mom == 1 && eight == 1) && numOfChildren >= 1)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to ";
		numOfPeopleSignaled = 3;


                mom--;
                hayrides--;
		signal(mproceed);

                eight--;
		hayrides--;
		signal(mproceed);

		numOfChildren--;
                hayrides--;
                signal(cproceed);
	}
	//The mom and child8 are ready and there is no one else to go with them
	else if ((mom == 1 && eight == 1) && hayrides == 2)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to \n";
		numOfPeopleSignaled = 2;

                mom--;
                hayrides--;
		signal(mproceed);

                eight--;
                hayrides--;
		signal(mproceed);
	}
	//The mom, child8, and a relative are the only one's left
	else if ((mom == 1 && eight == 1 && numOfRelatives == 1) && hayrides == 3)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to \n";
		numOfPeopleSignaled = 2;

                mom--;
                hayrides--;
		signal(mproceed);

                eight--;
                hayrides--;
		signal(mproceed);
	}
	//One realitive and a child other than child8 are the last to go
	else if ((numOfRelatives == 1 && numOfChildren == 1) && hayrides == 2)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to ";
		numOfPeopleSignaled = 2;

		numOfRelatives--;
                hayrides--;
		signal(rproceed);


		numOfChildren--;
                hayrides--;
		signal(cproceed);
	}
	//one relative is the last to go
	else if ((numOfRelatives == 1) && hayrides == 1)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to ";
		numOfPeopleSignaled = 1;

		numOfRelatives--;
                hayrides--;
		signal(rproceed);
	}
	//one child is last to go
	else if ((numOfChildren == 1) && hayrides == 1)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to ";
		numOfPeopleSignaled = 1;

		numOfChildren--;
                hayrides--;
		signal(cproceed);
	}
	//two children are last to go
	else if ((numOfChildren == 2) && hayrides == 2)
	{
		//Father gives hayride
		wait(mutex);
		space(15);
	        cout << "Father gives hayride to ";
		numOfPeopleSignaled = 2;


		numOfChildren--;
                hayrides--;
		signal(cproceed);

		numOfChildren--;
                hayrides--;
		signal(cproceed);
	}
	//None of the above situations
	else
	{
	//Father goes asleep and is woken up to check again by newly ariving processes
		fatherNeedsToCheckAgain = 1;
		wait (newArrival);
		signal(mutex3);
                fatherNeedsToCheckAgain = 0;
	}

     }

/////////////////////////////////

    //Father unhooks horses, feeds them, goes into the house, and cleans up for dinner
    wait(mutex);
    space(15);
    cout << "Father unhooks horses, feeds them, goes into the house, and cleans up for dinner.\n";
    signal(mutex);

    //delay while father is doing these things
    delay();

//////DINNER CODE GOES HERE//////

    //Father sits down to eat
    wait(mutex);
    space(15);
    cout << "Father sits down.\n";
    //Originally this output text before signal mutex
    peopleSitting--;
    signal(mutex);



    if (peopleSitting == 0) //Father is last person to sit
    {

          //Father carves the turkey
          wait(mutex);
          space(15);
  	  cout << "Father carves the turkey.\n";
          signal(mutex);

         //Father is last person
   	  for (i = 0; i < 15; i++) {
         	signal(eat);
   	 }

    }
    else //Father is not last person so wait for last person to sit
    {
          wait(lastPersonHasSat);

          //Father carves the turkey
          wait(mutex);
          space(15);
  	  cout << "Father carves the turkey.\n";
          signal(mutex);

         //Father is last person
   	  for (i = 0; i < 15; i++) {
         	signal(eat);
   	 }
    }

    //Father eats
    wait(mutex);
    space(15);
    cout << "Father is eating.\n";
    peopleEating--;
    signal(mutex);


    delay(); //Delay while eating


    if (peopleEating == 0) //Father is last to finish eating
    {
          wait(mutex);
          space(15);
  	  cout << "Father excuses everyone from table.\n";
          signal(mutex);

         //Signal that everyone can leave
   	  for (i = 0; i < 15; i++) {
         	signal(leave);
   	 }

    }
    else //Father is not last person so wait for last person to finish eating
    {
          wait(lastPersonEating);

          //Father dismisses everyone
          wait(mutex);
          space(15);
  	  cout << "Father excuses everyone from table.\n";
          signal(mutex);

         //Signal that everyone can leave
   	  for (i = 0; i < 15; i++) {
         	signal(leave);
   	 }
    }


/////////////////////////////////

    //Father watches football and takes a nap
    wait(mutex);
    space(15);
    cout << "Father watches football and takes a nap.\n";
    signal(mutex);

}

////////////////////////////////////////////

void Child (int ID) {

    //Child rakes leaves
    wait(mutex);
    space(5);
    cout << "Child" << ID << " is raking leaves.\n";
    signal(mutex);

    //delay while child rakes leaves
    delay();

//////HAYRIDE CODE GOES HERE//////

if (ID == 8) //Child is youngest child waits for mother
{
    signal(processEightHasArrived); //Signal to let mother know child8 is waiting
    wait(momHasArrived); //wait for mother to signal she is also waiting

    wait(mutex);
    space(5);
    cout << "Child" << ID << " waits for hayride.\n";
    eight++;
    signal(mutex);

    signal(newArrival); //Let father know there is a new arrival

    wait(mproceed); //Wait for father to give Child a hayride

    wait(mutex2);
    cout << " Child" << ID << " ";
    numOfPeopleSignaled--;
    if (numOfPeopleSignaled == 0) {
        cout << "\n";   
     	signal(mutex);
	signal(mutex3);
    }
    signal(mutex2);
}
else //Child is not the youngest child
{
    //Child waits for hayride
    wait(mutex);
    space(5);
    cout << "Child" << ID << " waits for hayride.\n";
    numOfChildren++;
    signal(mutex);

    signal(newArrival); //Let father know there is a new arrival

    //Wait until they are paired suitably
    wait(cproceed);

    wait(mutex2);
    cout << " Child" << ID << " ";
    numOfPeopleSignaled--;
    if (numOfPeopleSignaled == 0) {
        cout << "\n";
     	signal(mutex);
	signal(mutex3);
    }
    signal(mutex2);
}

//////////////////////////////////

    //Child enters house and cleans up
    wait(mutex);
    space(5);
    cout << "Child" << ID << " enters house and cleans up\n";
    signal(mutex);

    //delay while child is doing these things
    delay();

//////DINNER CODE GOES HERE//////

    //Child sits down to eat
    wait(mutex);
    space(5);
    cout << "Child" << ID << " sits down.\n";
    //Originally this output text before signal mutex
    peopleSitting--;
    signal(mutex);

    if (peopleSitting == 0)
    {
         //Last person has sat down
         signal(lastPersonHasSat);
         wait(eat);
    }
    else
    {
          //Still waiting for the last person to sit down
          wait(eat);
    }

    //Child eats
    wait(mutex);
    space(5);
    cout << "Child" << ID << " is eating.\n";
    peopleEating--;
    signal(mutex);

    delay();

    if (peopleEating == 0)
    {
         //Last person to finish eating
         signal(lastPersonEating);
         wait(leave);
    }
    else
    {
          //Still waiting for the last person to finish eating
          wait(leave);
    }

/////////////////////////////////

    //child goes out to play
    wait(mutex);
    space(5);
    cout << "Child" << ID << " goes out to play.\n";
    signal(mutex);

}

////////////////////////////////////////////

void Relative (int ID) {

    //delay before relative arrives
    delay();

    //Relative arives
    wait(mutex);
    space(0);
    cout << "Relative" << ID << " has arrived.\n";
    signal(mutex);

//////HAYRIDE CODE GOES HERE//////

    //Relative waits for hayride
    wait(mutex);
    space(0);
    cout << "Relative" << ID << " waits for hayride.\n";
    numOfRelative++;
    signal(mutex);

    signal(newArrival);

    //Wait until they are paired suitably
    wait(rproceed);


////Put OUTPUT MAGIC HERE/////////////
    wait(mutex2);
    cout << " Relative" << ID << " ";
    numOfPeopleSignaled--;
    if (numOfPeopleSignaled == 0) {
        cout << "\n";   
     	signal(mutex);
	signal(mutex3);
    }
    signal(mutex2);

//////////////////////////////////

    //relative enters house and cleans up
    wait(mutex);
    space(0);
    cout << "Relative" << ID << " enters house and cleans up\n";
    signal(mutex);

    //delay while relative is doing these things
    delay();


//////DINNER CODE GOES HERE//////

    //relative sits down to eat
    wait(mutex);
    space(0);
    cout << "Relative" << ID << " sits down.\n";
    //Originally this output text before signal mutex
    peopleSitting--;
    signal(mutex);



    if (peopleSitting == 0)
    {
          //Last person has sat down
         signal(lastPersonHasSat);
         wait(eat);
    }
    else
    {
          //Still waiting for the last person to sit down
          wait(eat);
    }

    //Relative eats
    wait(mutex);
    space(0);
    cout << "Relative" << ID << " is eating.\n";
    peopleEating--;
    signal(mutex);

    delay();

    if (peopleEating == 0)
    {
          //Last person to finish eating
         signal(lastPersonEating);
         wait(leave);
    }
    else
    {
          //Still waiting for the last person to finish eating
          wait(leave);
    }

//////////////////////////////////

    //relative leaves
    wait(mutex);
    space(0);
    cout << "Relative" << ID << " leaves.\n";
    signal(mutex);

}

////////////////////////////////////////////

void main() {
  
    peopleSitting = 16;
    peopleEating = 16;
    hayrides = 15;
    done = 0;
    numOfChildren = 0;
    numOfRelatives = 0;
    fatherNeedsToCheckAgain = 0;
    mom = 0;
    eight = 0;
    numOfPeopleSignaled = 0;

    initialsem (mutex, 1);
    initialsem (mutex2, 1);
    initialsem (mutex3, 1);
    initialsem (lastPersonHasSat, 0);
    initialsem (eat, 0);
    initialsem (lastPersonEating, 0);
    initialsem (leave, 0);
    initialsem (cproceed, 0);
    initialsem (rproceed, 0);
    initialsem (newArrival, 0);
    initialsem (mproceed, 0);
    initialsem (processEightHasArrived, 0);
    initialsem (momHasArrived, 0);

    cobegin 
    {
       Mother();
       Father();
       Child(1);
       Child(2);
       Child(3);
       Child(4);
       Child(5);
       Child(6);
       Child(7);
       Child(8);
       Relative(1);
       Relative(2);
       Relative(3);
       Relative(4);
       Relative(5);
       Relative(6);
     }

     cout << endl;
}
